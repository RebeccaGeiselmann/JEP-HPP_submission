##### This script analyses the 3rd and 4th experiment of the moving discs study with outliers included ##### 
#  This includes: 
# Participants with 25% of responses below 800ms
# Participants whose longstring index is above the threshold
# Indiviudal response below 800ms for the purpose response and 300ms for the confidence ratings
# Responses whose response times for both purpose response and confidence ratings fall outside of the whiskers of a boxplot

# Data-wrangling original data ---------------------------------------------------------------

# Install and load packages
install.packages("readr") # for reading csv files
library(readr)
install.packages("dplyr") # for data manipulation
library(dplyr)
install.packages("tidyr") # for tidying data
library(tidyr)
install.packages("ggplot2") # for data visualisation
library(ggplot2)
install.packages("stringr") # for string manipulation
library(stringr)
install.packages("lme4") # for linear regression models
library(lme4)
install.packages("emmeans") # for post-hoc comparisons
library(emmeans) 
install.packages("ordinal") # for ordinal regression models
library(ordinal)  
install.packages("gridExtra")
library(gridExtra)

# Clear the workspace
rm(list = ls())

# Set the working directory to the folder containing the participant files
setwd("/Users/slava/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Analysis_online_experiments/3rd_online_experiment/incl_outliers")

# Set the working directory to the folder containing the participant files
setwd("/Users/slava/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Analysis_online_experiments/4th_online_experiment/incl_outliers")

# List of file names for each participant's data 3rd exp.
participant_files <- c("P1.csv","P2.csv","P3.csv","P4.csv","P5.csv","P6.csv","P7.csv",
                       "P8.csv","P9.csv","P10.csv","P11.csv","P12.csv","P13.csv","P14.csv",
                       "P15.csv","P16.csv","P17.csv","P18.csv","P19.csv","P20.csv","P21.csv", 
                       "P22.csv","P23.csv","P24.csv","P25.csv","P26.csv","P27.csv","P28.csv", 
                       "P29.csv","P30.csv","P31.csv","P32.csv","P33.csv","P34.csv","P35.csv",
                       "P36.csv","P37.csv","P38.csv","P39.csv","P40.csv","P41.csv","P42.csv",
                       "P43.csv","P44.csv","P45.csv","P46.csv","P47.csv","P48.csv","P49.csv",
                       "P50.csv","P51.csv","P52.csv","P53.csv","P54.csv","P55.csv","P56.csv",
                       "P57.csv","P58.csv","P59.csv","P60.csv","P61.csv","P62.csv","P63.csv",
                       "P64.csv","P65.csv","P66.csv","P67.csv","P68.csv","P69.csv","P70.csv",
                       "P71.csv","P72.csv","P73.csv","P74.csv","P75.csv","P76.csv", "P77.csv", 
                       "P78.csv", "P79.csv")

# List of file names for each participant's data 4th exp.
participant_files <- c("P1.csv","P2.csv","P3.csv","P4.csv","P5.csv","P6.csv","P7.csv",
                       "P8.csv","P9.csv","P10.csv","P11.csv","P12.csv","P13.csv","P14.csv",
                       "P15.csv","P16.csv","P17.csv","P18.csv","P19.csv","P20.csv","P21.csv", 
                       "P22.csv","P23.csv","P24.csv","P25.csv","P26.csv","P27.csv","P28.csv", 
                       "P29.csv","P30.csv","P31.csv","P32.csv","P33.csv","P34.csv","P35.csv",
                       "P36.csv","P37.csv","P38.csv","P39.csv","P40.csv","P41.csv","P42.csv",
                       "P43.csv","P44.csv","P45.csv","P46.csv","P47.csv","P48.csv","P49.csv",
                       "P50.csv","P51.csv","P52.csv","P53.csv","P54.csv","P55.csv","P56.csv",
                       "P57.csv","P58.csv","P59.csv","P60.csv","P61.csv","P62.csv","P63.csv",
                       "P64.csv","P65.csv","P66.csv","P67.csv","P68.csv","P69.csv","P70.csv",
                       "P71.csv","P72.csv","P73.csv","P74.csv","P75.csv","P76.csv", "P77.csv", 
                       "P78.csv", "P79.csv", "P80.csv","P81.csv","P82.csv","P83.csv","P84.csv", 
                       "P85.csv","P86.csv","P87.csv","P88.csv")

# Initialize an empty list to store data frames for each participant
original_data <- list()

# Initialize a variable to track the maximum number of rows across all data frames
max_rows <- 0

# Loop through each file, read the data, and update max_rows
for (file in participant_files) {
  data <- read_csv(file)
  print(paste("Reading file:", file))
  max_rows <- max(max_rows, nrow(data))
  original_data[[length(original_data) + 1]] <- data
}

# Initialize an empty data frame to store combined data for all participants, including outliers
all_participants_incl_outliers <- data.frame()

# Loop through each participant's data frame
for (i in 1:length(original_data)) {
  data <- original_data[[i]]
  
  # Ensure the data has max_rows rows, filling with NAs if not
  if (nrow(data) < max_rows) {
    needed <- max_rows - nrow(data)
    na_data <- as.data.frame(matrix(NA, ncol = ncol(data), nrow = needed))
    colnames(na_data) <- colnames(data)
    data <- rbind(data, na_data)
  }
  
  # Select the columns of interest
  selected_data <- data[c('ParticipantID', 'workerId', 'binary_question_key_resp.keys', 'binary_question_key_resp.rt', 'slider_confidence.response', 'slider_confidence.rt', 'condition', 'movie1')]
  
  # Rename columns to avoid name clashes
  colnames(selected_data) <- paste0(colnames(selected_data), "_", i)
  
  # Append the data to the final data frame
  if(ncol(all_participants_incl_outliers) == 0) {
    all_participants_incl_outliers <- selected_data
  } else {
    all_participants_incl_outliers <- cbind(all_participants_incl_outliers, selected_data)
  }
}

# Save the final data frame (named all_participants_incl_outliers) to a CSV file
write.csv(all_participants_incl_outliers, "all_participants_incl_outliers.csv", row.names = FALSE)

## Regression Data-wrangling ---------------------------------------------------

# Read in the combined dataset
all_participants_incl_outliers <- read_csv("all_participants_incl_outliers.csv")

# Initialize an empty dataframe to store the reshaped data
regression_input <- data.frame()

# Loop through each participant
for (i in 1:length(original_data)) {
  # Dynamically generate column names for the current participant
  participant_columns <- c(paste0("ParticipantID_", i), paste0("binary_question_key_resp.keys_", i), 
                           paste0("binary_question_key_resp.rt_", i), paste0("slider_confidence.response_", i), 
                           paste0("condition_", i))
  
  # Extract columns for the current participant, selecting rows 10 to 50
  participant_data <- all_participants_incl_outliers %>%
    dplyr::select(all_of(participant_columns)) %>%
    dplyr::slice(9:48)  # Selecting rows 9 to 48 (since indices are inclusive)
  
  # Rename columns to remove the participant index and make them consistent
  colnames(participant_data) <- c("ParticipantID", "binary_question_key_resp.keys", 
                                  "binary_question_key_resp.rt", "slider_confidence.response", 
                                  "condition")
  
  # Add a column for the participant ID
  participant_data$participant <- i
  
  # Bind the data for the current participant to the reshaped data frame
  regression_input <- bind_rows(regression_input, participant_data)
}

# View the resulting reshaped dataframe
print(regression_input)

# Save the resulting dataframe to a CSV file
write.csv(regression_input, "regression_input.csv", row.names = FALSE)

## Mixed effects regression binary response (factorial design) -------------------------

# Read your original dataset
regression_input <- read.csv("regression_input.csv")

## Data-wrangling 

# Create the CrossCorrelation column
regression_input$correlation <- ifelse(grepl("HS", regression_input$condition), "high", "low")

# Create the Interaction column
regression_input$interaction <- ifelse(grepl("DA$", regression_input$condition), "absent", "present")

# Convert the new columns to factors if necessary
regression_input$correlation <- as.factor(regression_input$correlation)
regression_input$interaction <- as.factor(regression_input$interaction)

# Save the updated dataframe
write.csv(regression_input, "factorial_regression_input.csv", row.names = FALSE)

## Binary response 

# Load the regression input data
regression_input <- read_csv("factorial_regression_input.csv")

# Recode binary responses
# left = 1; right = 0; handle NAs
regression_input$binary_question_key_resp.keys <- ifelse(
  regression_input$binary_question_key_resp.keys == "left", "1",
  ifelse(regression_input$binary_question_key_resp.keys == "right", "0", NA)
)

# Check if the recoding was successful and view a summary
summary(regression_input$binary_question_key_resp.keys)

# Print the updated dataframe
print (regression_input)

# Convert binary responses to factor
regression_input$binary_question_key_resp.keys <- as.factor(regression_input$binary_question_key_resp.keys)

# Set reference levels for factors
# Sets "high" as the reference level for correlation and "present" as the reference level for interaction
regression_input$correlation <- factor(regression_input$correlation, levels = c("high", "low"))
regression_input$interaction <- factor(regression_input$interaction, levels = c("present", "absent")) 

# Fit a mixed-effects logistic regression model with interaction terms
# Specify control settings if you're having convergence issues, otherwise, this might be optional
# control <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1000))
# control <- glmerControl(optimizer = "nloptwrap")

binary_model_mixed <- glmer(binary_question_key_resp.keys ~ correlation * interaction + (1 | participant),
                            family = binomial, data = regression_input)

# Fit a mixed-effects logistic regression model without interaction terms
binary_model_mixed_no_interaction <- glmer(binary_question_key_resp.keys ~ correlation + interaction + (1 | participant),
                            family = binomial, data = regression_input)

# Fit a logistic regression model with interaction terms (without mixed-effects)
binary_model_standard <- glm(binary_question_key_resp.keys ~ correlation * interaction, 
                             family = binomial, data = regression_input)


# Summarize the model results
summary(binary_model_mixed)
summary(binary_model_mixed_no_interaction)
summary(binary_model_standard) 

# Get estimated marginal means
emm <- emmeans(binary_model_mixed, ~ correlation | interaction) # Effect of synchrony at each motion level
emm2 <- emmeans(binary_model_mixed, ~ interaction | correlation) # Effect of motion at each synchrony level

# Test simple effects: Synchrony at each level of Directed Motion
contrast(emm, method = "pairwise", adjust = "bonferroni") 

# Test simple effects: Directed Motion at each level of Synchrony
contrast(emm2, method = "pairwise", adjust = "bonferroni")

# Get estimated marginal means
emm <- emmeans(binary_model_standard, ~ correlation | interaction) # Effect of synchrony at each motion level
emm2 <- emmeans(binary_model_standard, ~ interaction | correlation) # Effect of motion at each synchrony level

# Test simple effects: Synchrony at each level of Directed Motion
contrast(emm, method = "pairwise", adjust = "bonferroni") 

# Test simple effects: Directed Motion at each level of Synchrony
contrast(emm2, method = "pairwise", adjust = "bonferroni")

# Perform post-hoc comparisons using the emmeans package
emm <- emmeans(binary_model_mixed, ~ correlation * interaction)
comparisons_binary_mixed<- pairs(emm)

emm <- emmeans(binary_model_standard, ~ correlation * interaction)
comparisons_binary_standard<- pairs(emm)

# Print the pairwise comparisons
summary(comparisons_binary_mixed)
summary(comparisons_binary_standard)

# Mixed effects regression RT (factorial design)--------------------------------

# Read the dataset
regression_input <- read.csv("factorial_regression_input.csv")

# Convert reaction times to numeric
regression_input$binary_question_key_resp.rt <- as.numeric(regression_input$binary_question_key_resp.rt)

# Set reference levels for factors
regression_input$correlation <- factor(regression_input$correlation, levels = c("high", "low"))
regression_input$interaction <- factor(regression_input$interaction, levels = c("present", "absent"))

# Remove rows with zero reaction times
regression_input <- regression_input[regression_input$binary_question_key_resp.rt > 0, ]

# Fit a mixed-effects linear regression model for reaction times with interaction
gamma_regression_model_mixed <- glmer(binary_question_key_resp.rt ~ correlation * interaction + (1 | participant), 
family = Gamma(link = "log"), data = regression_input)
# this lead to convergence issues

# Alternative:
gamma_regression_model_mixed <- glmer(
  binary_question_key_resp.rt ~ correlation * interaction + (1 | participant),
  family = Gamma(link = "log"), 
  data = regression_input,
  control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5))
)

# Fit a mixed-effects linear regression model for reaction times without interaction
gamma_regression_model_mixed_no_interaction <- glmer(binary_question_key_resp.rt ~ correlation + interaction + (1 | participant), 
                                      family = Gamma(link = "log"), data = regression_input)

# Alternative:
gamma_regression_model_mixed_no_interaction <- glmer(
  binary_question_key_resp.rt ~ correlation + interaction + (1 | participant),
  family = Gamma(link = "log"), 
  data = regression_input,
  control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5))
)


gamma_regression_model_standard <- glm(binary_question_key_resp.rt ~ correlation * interaction, 
                                       family = Gamma(link = "log"), data = regression_input)


# Summarize the model results
summary(gamma_regression_model_mixed)
summary(gamma_regression_model_mixed_no_interaction)
summary(gamma_regression_model_standard)

# Effect of Directed Motion (Present vs. Absent) at Each Level of Synchrony
emm_dm <- emmeans(gamma_regression_model_mixed, ~ interaction | correlation)
contrast(emm_dm, method = "pairwise", adjust = "bonferroni")

# Effect of Synchrony (High vs. Low) at Each Level of Directed Motion
emm_sync <- emmeans(gamma_regression_model_mixed, ~ correlation | interaction)
contrast(emm_sync, method = "pairwise", adjust = "bonferroni")

# Effect of Directed Motion (Present vs. Absent) at Each Level of Synchrony
emm_dm <- emmeans(gamma_regression_model_standard, ~ interaction | correlation)
contrast(emm_dm, method = "pairwise", adjust = "bonferroni")

# Effect of Synchrony (High vs. Low) at Each Level of Directed Motion
emm_sync <- emmeans(gamma_regression_model_standard, ~ correlation | interaction)
contrast(emm_sync, method = "pairwise", adjust = "bonferroni")

# Perform post-hoc comparisons using the emmeans package
emm <- emmeans(gamma_regression_model_mixed, ~ correlation * interaction)
comparisons_gamma_mixed <- pairs(emm, adjust = "tukey")

emm <- emmeans(gamma_regression_model_standard, ~ correlation * interaction)
comparisons_gamma_standard <- pairs(emm, adjust = "tukey")

# Print the pairwise comparisons
summary(comparisons_gamma_mixed)
summary(comparisons_gamma_standard)

# Mixed effects regression confidence (factorial design) ----------------------

# Read the updated dataset
regression_input <- read.csv("factorial_regression_input.csv")

# Convert confidence ratings to an ordered factor
regression_input$slider_confidence.response<- factor(regression_input$slider_confidence.response, ordered = TRUE)

# Set reference levels for factors
regression_input$correlation <- factor(regression_input$correlation, levels = c("high", "low"))
regression_input$interaction <- factor(regression_input$interaction, levels = c("present", "absent"))

# Fit a cumulative link model (CLM) for ordinal responses with interaction terms
ordinal_regression_model_mixed <- clmm(slider_confidence.response ~ correlation * interaction + (1 | participant), data = regression_input)
ordinal_regression_model_standard <- clm(slider_confidence.response ~ correlation * interaction, data = regression_input)
# Fit a cumulative link model (CLM) for ordinal responses without interaction terms
ordinal_regression_model_mixed_no_interaction <- clmm(slider_confidence.response ~ correlation + interaction + (1 | participant), data = regression_input)

# Summarize the model results
summary(ordinal_regression_model_mixed)
summary(ordinal_regression_model_mixed_no_interaction)
summary(ordinal_regression_model_standard)

# Effect of Directed Motion (Present vs. Absent) at Each Level of Synchrony
emm_dm <- emmeans(ordinal_regression_model_mixed, ~ interaction | correlation)
contrast(emm_dm, method = "pairwise", adjust = "bonferroni")

# Effect of Synchrony (High vs. Low) at Each Level of Directed Motion
emm_sync <- emmeans(ordinal_regression_model_mixed, ~ correlation | interaction)
contrast(emm_sync, method = "pairwise", adjust = "bonferroni")

# Effect of Directed Motion (Present vs. Absent) at Each Level of Synchrony
emm_dm <- emmeans(ordinal_regression_model_standard, ~ interaction | correlation)
contrast(emm_dm, method = "pairwise", adjust = "bonferroni")

# Effect of Synchrony (High vs. Low) at Each Level of Directed Motion
emm_sync <- emmeans(ordinal_regression_model_standard, ~ correlation | interaction)
contrast(emm_sync, method = "pairwise", adjust = "bonferroni")

# Perform post-hoc comparisons using the emmeans package
emm <- emmeans(ordinal_regression_model_mixed, ~ correlation * interaction)
comparisons_ordinal_mixed <- emm %>% pairs(adjust = "tukey")

emm <- emmeans(ordinal_regression_model_standard, ~ correlation * interaction)
comparisons_ordinal_standard <- emm %>% pairs(adjust = "tukey")

# Print the pairwise comparisons
summary(comparisons_ordinal_mixed)
summary(comparisons_ordinal_standard)


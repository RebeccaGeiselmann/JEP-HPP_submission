# -----------------------------------------------------------------------------------
# SCRIPT ANALYSING WHETHER THE BINARY RESPONSE (YES/NO) PREDICTS CONFIDENCE
# -----------------------------------------------------------------------------------

# Load necessary libraries
library(dplyr)      # Data manipulation
library(readr)      # Reading CSV files
library(tidyr)      # Data tidying
library(ggplot2)    # Visualization
library(lme4)       # Mixed-effects modeling
library(ordinal)    # Ordinal regression models
library(emmeans)    # Post-hoc comparisons

# Clear the workspace
rm(list = ls())

# Set the working directory to the folder containing the participant files
setwd("/Users/slava/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Analysis_online_experiments/3rd_online_experiment/excl_outliers")

# -----------------------------------------------------------------------------------
# Data Wrangling for Confidence Ratings 
# -----------------------------------------------------------------------------------

# Read in the dataset containing all participants' responses (excluding outliers)
# This script just runs the analysis on experiment 1 (chase)
all_participants_excl_outliers <- read_csv("all_participants_excl_outliers.csv")

# Initialize an empty data frame for reshaped data
regression_input <- data.frame()

# Extract and reshape relevant columns for each participant
for (i in 1:78) {
  # Construct column names dynamically for each participant
  participant_id_col <- paste0("ParticipantID_", i)
  binary_resp_col <- paste0("binary_question_key_resp.keys_", i)
  rt_col <- paste0("binary_question_key_resp.rt_", i)
  confidence_col <- paste0("slider_confidence.response_", i)
  condition_col <- paste0("condition_", i)
  
  # Check if the required columns exist in the dataset
  if (all(c(participant_id_col, binary_resp_col, rt_col, confidence_col, condition_col) %in% colnames(all_participants_excl_outliers))) {
    
    # Extract the relevant columns and select rows 10 to 50 (inclusive)
    participant_data <- all_participants_excl_outliers %>%
      dplyr::select(!!rlang::sym(participant_id_col), !!rlang::sym(binary_resp_col), 
                    !!rlang::sym(rt_col), !!rlang::sym(confidence_col), !!rlang::sym(condition_col)) %>%
      dplyr::slice(9:48)  # Selecting the correct range of rows
    
    # Rename columns for consistency across participants
    colnames(participant_data) <- c("ParticipantID", "binary_question_key_resp.keys", 
                                    "binary_question_key_resp.rt", "slider_confidence.response", 
                                    "condition")
    
    # Add a column to store participant index
    participant_data$participant <- i
    
    # Append the reshaped data for this participant to the final dataset
    regression_input <- bind_rows(regression_input, participant_data)
  } else {
    message("One or more columns are missing for participant ", i)
  }
}

# Save the reshaped data as a CSV file
write.csv(regression_input, "regression_input.csv", row.names = FALSE)

# -----------------------------------------------------------------------------------
#  Mixed Effects Logistic Regression 
# -----------------------------------------------------------------------------------

# Read in the reshaped dataset
regression_input <- read.csv("regression_input.csv")

# Set reference levels for conditions (HSDP as the reference category)
regression_input$condition <- relevel(factor(regression_input$condition), ref = "HSDP")

# Recode binary responses: "left" = Yes (1), "right" = No (0)
regression_input$binary_response <- ifelse(regression_input$binary_question_key_resp.keys == "left", 1, 
                                           ifelse(regression_input$binary_question_key_resp.keys == "right", 0, NA))

# Convert binary_response to a factor variable for ordinal regression
regression_input$binary_response <- as.factor(regression_input$binary_response)

# Remove rows with NA values
regression_input <- na.omit(regression_input)

# Convert confidence ratings to an ordered factor for ordinal regression
regression_input$slider_confidence.response <- factor(regression_input$slider_confidence.response, ordered = TRUE)

# Fit an ordinal regression model (CLM) without random effects
ordinal_regression_model_standard <- clm(slider_confidence.response ~ binary_response * condition, 
                                         data = regression_input)

# Print summary of the standard ordinal regression model
summary(ordinal_regression_model_standard)

# Fit a cumulative link mixed model (CLMM) with participant as a random effect
ordinal_mixed_model <- clmm(slider_confidence.response ~ binary_response * condition + (1 | participant), 
                            data = regression_input)

# Alternative CLMM with increased iteration and tolerance settings
ordinal_mixed_model <- clmm(slider_confidence.response ~ binary_response * condition + (1 | participant),
                            data = regression_input,
                            control = clmm.control(maxIter = 10000, gradTol = 1e-5))

# Fit a CLMM without interaction terms
ordinal_mixed_model_no_interaction <- clmm(slider_confidence.response ~ binary_response + condition + (1 | participant), 
                                           data = regression_input)

# Print summaries of the models
summary(ordinal_mixed_model)
summary(ordinal_mixed_model_no_interaction)

# Perform pairwise comparisons using estimated marginal means (EMMs)
emm <- emmeans(ordinal_mixed_model, ~ binary_response * condition)
comparisons_ordinal_mixed <- emm %>% pairs(adjust = "tukey")

# Print pairwise comparisons
summary(comparisons_ordinal_mixed)

# -----------------------------------------------------------------------------------
#  Compute Response Distributions 
# -----------------------------------------------------------------------------------

# Compute the distribution of Yes/No responses per condition
distribution_per_condition <- regression_input %>%
  group_by(condition, binary_response) %>%
  summarise(count = n()) %>%
  spread(binary_response, count, fill = 0) %>%
  rename(No = `0`, Yes = `1`) %>%
  mutate(Total = Yes + No)

# Compute the overall distribution of Yes/No responses
overall_distribution <- regression_input %>%
  group_by(binary_response) %>%
  summarise(count = n()) %>%
  spread(binary_response, count, fill = 0) %>%
  rename(No = `0`, Yes = `1`) %>%
  mutate(Total = Yes + No)

# Print the distributions
print("Distribution of Yes/No responses per condition:")
print(distribution_per_condition)

print("Overall distribution of Yes/No responses in the experiment:")
print(overall_distribution)

# -----------------------------------------------------------------------------------
#  Visualization 
# -----------------------------------------------------------------------------------

# Load the dataset
data <- read.csv("all_participants_excl_outliers.csv")

# Initialize an empty data frame to store reshaped data
reshaped_data <- data.frame()

# Loop through each participant and reshape the data
for (i in 1:78) {
  # Dynamically create column names for the participant
  condition_col <- paste0("condition_", i)
  binary_resp_col <- paste0("binary_question_key_resp.keys_", i)
  rt_col <- paste0("binary_question_key_resp.rt_", i)
  confidence_col <- paste0("slider_confidence.response_", i)
  
  # Check if the columns exist in the dataset
  if (all(c(condition_col, binary_resp_col, rt_col, confidence_col) %in% colnames(data))) {
    # Extract participant-specific columns using dplyr::select and slice rows 9 to 48
    participant_data <- data %>%
      dplyr::select(
        condition = !!sym(condition_col), 
        binary_response = !!sym(binary_resp_col), 
        response_time = !!sym(rt_col), 
        confidence = !!sym(confidence_col)
      ) %>%
      dplyr::slice(9:48)  # Include only rows 9 to 48
    
    # Add participant ID
    participant_data$participant <- i
    
    # Combine into reshaped data frame
    reshaped_data <- bind_rows(reshaped_data, participant_data)
  } else {
    message("One or more columns are missing for participant ", i)
  }
}

# Recode binary responses: "left" = Yes (1), "right" = No (0)
reshaped_data$binary_response <- ifelse(reshaped_data$binary_response == "left", 1, 
                                        ifelse(reshaped_data$binary_response == "right", 0, NA))

# Convert binary response to factor with levels ordered as "Yes" first and "No" second
reshaped_data$binary_response <- factor(reshaped_data$binary_response, levels = c(1, 0), labels = c("Yes", "No"))

# Exclude rows with NA values
reshaped_data <- na.omit(reshaped_data)

# Ensure the conditions are ordered correctly: HSDP, LSDP, HSDA, LSDA
reshaped_data$condition <- factor(reshaped_data$condition, levels = c("HSDP", "LSDP", "HSDA", "LSDA"))

# Calculate mean confidence ratings and confidence intervals by condition and binary response
mean_confidence_by_condition <- reshaped_data %>%
  group_by(condition, binary_response) %>%
  summarise(mean_confidence = mean(confidence, na.rm = TRUE),
            se_confidence = sd(confidence, na.rm = TRUE) / sqrt(n()),
            lower_ci = mean_confidence - qt(0.975, df=n()-1) * se_confidence,
            upper_ci = mean_confidence + qt(0.975, df=n()-1) * se_confidence) %>%
  ungroup()

# Calculate individual participant means for each condition and response type
individual_means <- reshaped_data %>%
  group_by(condition, binary_response, participant) %>%
  summarise(mean_confidence = mean(confidence, na.rm = TRUE)) %>%
  ungroup()

# Recode condition into synchrony and directed motion categories
reshaped_data <- reshaped_data %>%
  mutate(
    synchrony = ifelse(grepl("HS", condition), "High", "Low"),
    directed_motion = ifelse(grepl("DP$", condition), "Present", "Absent")
  )

# Compute mean confidence ratings with standard errors and confidence intervals
mean_confidence_by_factor <- reshaped_data %>%
  group_by(synchrony, directed_motion, binary_response) %>%
  summarise(
    mean_confidence = mean(confidence, na.rm = TRUE),
    se_confidence = sd(confidence, na.rm = TRUE) / sqrt(n()),
    lower_ci = mean_confidence - qt(0.975, df = n() - 1) * se_confidence,
    upper_ci = mean_confidence + qt(0.975, df = n() - 1) * se_confidence
  ) %>%
  ungroup()
# Generate a point plot for confidence ratings with synchrony and directed motion
p_points_conf <- ggplot(mean_confidence_by_factor, aes(x = synchrony, y = mean_confidence, color = directed_motion, shape = binary_response)) +
  # Add points for mean confidence with size adjusted to match the first plot
  geom_point(size = 4, position = position_dodge(width = 0.75), stroke = 0.5) +  # Adjust size of points to match
  
  # Add error bars for confidence intervals with linewidth set to match the first plot
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(width = 0.75), linewidth = 0.5) +  # Adjust error bar thickness
  
  # Set colors for Directed Motion (Present = Orange, Absent = Green)
  scale_color_manual(values = c("Present" = "orange", "Absent" = "darkgreen")) +  # Color for Directed Motion
  
  # Set shapes for responses (Yes = filled circle, No = hollow triangle)
  scale_shape_manual(values = c("Yes" = 16, "No" = 17)) +  # Different shapes for responses
  
  # Add labels and customize the appearance of the plot
  labs(
    x = "Synchrony", 
    y = "Mean Confidence", 
    color = "Directed Motion", 
    shape = "Response"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right", 
    text = element_text(size = rel(2)), 
    axis.title = element_text(size = rel(2)),
    axis.text = element_text(size = rel(2)),
    plot.title = element_text(size = rel(8)),
    legend.title = element_text(size = rel(8)),
    legend.text = element_text(size = rel(8))
  )

# Display the plot
print(p_points_conf)

# -----------------------------------------------------------------------------------
# Save the plot with the required resolution (DPI)
# -----------------------------------------------------------------------------------

# Save in high resolution for color images (300 DPI)
ggsave("confidence_point_plot_color_300DPI.png", 
       plot = p_points_conf, 
       dpi = 300, 
       width = 7, height = 5, 
       units = "in")

# Save in high resolution for grayscale images (600 DPI)
ggsave("confidence_point_plot_grayscale_600DPI.png", 
       plot = p_points_conf + scale_color_grey() + scale_fill_grey(), 
       dpi = 600, 
       width = 7, height = 5, 
       units = "in")

